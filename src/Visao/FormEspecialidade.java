/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Visao;

import ModeloBeans.BeansDadosUsuario;
import ModeloBeans.BeansEspecialidade;
import ModeloBeans.ModeloTabela;
import ModeloConection.ConexaoBd;
import ModeloDao.DaoEspecialidade;
import java.sql.SQLException;
import java.util.ArrayList;
//import javafx.scene.control.Alert;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;

/**
 *
 * @author Daniel Lucas
 */
public class FormEspecialidade extends javax.swing.JFrame {

    ConexaoBd conBd = new ConexaoBd();
    BeansEspecialidade beansEspec = new BeansEspecialidade();
    DaoEspecialidade daoEspec = new DaoEspecialidade();

    int flag = 0;//Usada para definir se vai salvar ou editar um registro (insert/update)

    /**
     * Creates new form FormEspecialidade
     */
    public FormEspecialidade() {

    }

    public FormEspecialidade(BeansDadosUsuario beansDadosUsuario) {
        initComponents();
        preencherEspecialidade("SELECT * FROM ESPECIALIDADE (NOLOCK) ORDER BY ESPEC");
    }

    public void preencherEspecialidade(String sql) {
        ArrayList dados = new ArrayList();
        String[] colunas = new String[]{"ID", "ESPECIALIDADE", "ATIVO"};
        String ativo;
        conBd.conectarBd();

        conBd.executaSql(sql);
        try {
            conBd.rs.first();
            do {
                if (conBd.rs.getBoolean("ATIVO") == true) {
                    ativo = "Sim";
                } else {
                    ativo = "Não";
                }
                dados.add(new Object[]{
                    conBd.rs.getInt("IDESPECIALIDADE"), conBd.rs.getString("ESPEC"), ativo}
                );
            } while (conBd.rs.next());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Erro ao carregar os dados da tabela especialidade. \n" + ex);
        }

        ModeloTabela beansEspecelo = new ModeloTabela(dados, colunas);
        jTableEspecialidade.setModel(beansEspecelo);

        jTableEspecialidade.getColumnModel().getColumn(0).setPreferredWidth(38);//Tamanho da tabela
        jTableEspecialidade.getColumnModel().getColumn(0).setResizable(false);

        jTableEspecialidade.getColumnModel().getColumn(1).setPreferredWidth(130);
        jTableEspecialidade.getColumnModel().getColumn(1).setResizable(false);

        jTableEspecialidade.getColumnModel().getColumn(2).setPreferredWidth(48);
        jTableEspecialidade.getColumnModel().getColumn(2).setResizable(false);

        jTableEspecialidade.getTableHeader().setReorderingAllowed(false);//reorganizar o cabeçalho
        jTableEspecialidade.setAutoResizeMode(jTableEspecialidade.AUTO_RESIZE_OFF); //NÃO VAI PODER REDIMENCIONAR A TABELA
        jTableEspecialidade.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);//selecionar um por vez 
        //total do tamanho dos campos = 38 + 110 = 148
        conBd.DesconectarBd();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT beansEspecify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEspecialidade = new javax.swing.JTable();
        jButtonIncluir = new javax.swing.JButton();
        jTextFieldPesquisaEspecialidade = new javax.swing.JTextField();
        jButtonCancelar = new javax.swing.JButton();
        jCheckBoxAtivo = new javax.swing.JCheckBox();
        jButtonPesquisar = new javax.swing.JButton();
        jButtonEditar = new javax.swing.JButton();
        jButtonSalvar = new javax.swing.JButton();
        jTextFieldIdEspec = new javax.swing.JTextField();
        jTextFieNomeEspecialidade = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Especialidade");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Cadastro de Especialidade");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTableEspecialidade.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTableEspecialidade.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableEspecialidade.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableEspecialidadeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableEspecialidade);

        jButtonIncluir.setText("Incluir");
        jButtonIncluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIncluirActionPerformed(evt);
            }
        });

        jTextFieldPesquisaEspecialidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPesquisaEspecialidadeActionPerformed(evt);
            }
        });

        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.setEnabled(false);
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jCheckBoxAtivo.setText("Ativo");
        jCheckBoxAtivo.setEnabled(false);

        jButtonPesquisar.setText("Pesquisar");
        jButtonPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPesquisarActionPerformed(evt);
            }
        });

        jButtonEditar.setText("Editar");
        jButtonEditar.setEnabled(false);
        jButtonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarActionPerformed(evt);
            }
        });

        jButtonSalvar.setText("Salvar");
        jButtonSalvar.setEnabled(false);
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });

        jTextFieldIdEspec.setEnabled(false);

        jTextFieNomeEspecialidade.setEnabled(false);

        jLabel2.setText("ID Especialidade:");

        jLabel3.setText("Especialidade:");

        jLabel4.setText("Buscar Especialidade:");

        jButton1.setText("Atualizar Tabela");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieNomeEspecialidade)
                    .addComponent(jTextFieldPesquisaEspecialidade)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonIncluir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonEditar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonSalvar))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonCancelar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldIdEspec, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxAtivo))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(0, 5, Short.MAX_VALUE))
                    .addComponent(jButtonPesquisar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonIncluir)
                            .addComponent(jButtonEditar)
                            .addComponent(jButtonSalvar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonCancelar)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextFieldIdEspec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxAtivo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieNomeEspecialidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addGap(3, 3, 3)
                        .addComponent(jTextFieldPesquisaEspecialidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonPesquisar)
                        .addGap(0, 7, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(506, 377));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPesquisarActionPerformed
        // TODO add your handling code here:

        if (!jTextFieldPesquisaEspecialidade.getText().isEmpty()) {
            jButtonIncluir.setEnabled(false);
            jButtonSalvar.setEnabled(false);
            jButtonCancelar.setEnabled(true);
            jButtonEditar.setEnabled(true);

            beansEspec.setPesquisa(jTextFieldPesquisaEspecialidade.getText());
            preencherEspecialidade("SELECT * FROM ESPECIALIDADE (NOLOCK) WHERE ESPEC like '%" + beansEspec.getPesquisa() + "%'");
        } else {
            jButtonIncluir.setEnabled(true);
            jButtonSalvar.setEnabled(false);
            jButtonCancelar.setEnabled(false);
            jButtonEditar.setEnabled(false);

        }
    }//GEN-LAST:event_jButtonPesquisarActionPerformed

    private void jTextFieldPesquisaEspecialidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPesquisaEspecialidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPesquisaEspecialidadeActionPerformed

    private void jTableEspecialidadeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEspecialidadeMouseClicked
        // TODO add your handling code here:
        desabilitarCampos();
        String nomeEspecialidade = "" + jTableEspecialidade.getValueAt(jTableEspecialidade.getSelectedRow(), 1);
        String idEspecialidade = "" + jTableEspecialidade.getValueAt(jTableEspecialidade.getSelectedRow(), 0);
        jCheckBoxAtivo.setEnabled(false);
        jButtonCancelar.setEnabled(true);
        jButtonIncluir.setEnabled(false);
        jButtonSalvar.setEnabled(false);
        jButtonEditar.setEnabled(true);
        jButtonPesquisar.setEnabled(true);
        jTextFieldPesquisaEspecialidade.setEnabled(true);

        String sql = "SELECT * FROM ESPECIALIDADE (NOLOCK) WHERE IDESPECIALIDADE = " + idEspecialidade;
        conBd.conectarBd();

        try {
            conBd.executaSql(sql);
            conBd.rs.first();

            jTextFieldIdEspec.setText(String.valueOf(conBd.rs.getString("IDESPECIALIDADE")));
            jTextFieNomeEspecialidade.setText(conBd.rs.getString("ESPEC"));
            jCheckBoxAtivo.setSelected(conBd.rs.getBoolean("ATIVO"));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao selecionar a especialidade! Especialidade: " + nomeEspecialidade
                    + "\n" + ex.getMessage());
        }
        conBd.DesconectarBd();

    }//GEN-LAST:event_jTableEspecialidadeMouseClicked

    private void jButtonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarActionPerformed
        // TODO add your handling code here:
        flag = 2;

        jButtonSalvar.setEnabled(true);
        jButtonCancelar.setEnabled(true);
        jButtonEditar.setEnabled(false);
        jButtonPesquisar.setEnabled(false);

        jTextFieldIdEspec.setEnabled(false);
        jTextFieNomeEspecialidade.setEnabled(true);
        jCheckBoxAtivo.setEnabled(true);
        jTextFieldPesquisaEspecialidade.setEnabled(false);
    }//GEN-LAST:event_jButtonEditarActionPerformed

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed
        // TODO add your handling code here:
        jButtonCancelar.setEnabled(false);
        jButtonSalvar.setEnabled(false);
        jButtonIncluir.setEnabled(true);
        jButtonEditar.setEnabled(false);

        jTextFieNomeEspecialidade.setEnabled(false);

        jTextFieldIdEspec.setEnabled(false);
        jCheckBoxAtivo.setEnabled(true);

        if (jTextFieNomeEspecialidade.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Preencha a especialidade para continuar.");
            jTextFieNomeEspecialidade.requestFocus();
        }

        if (flag == 1) {
            //Ler campos da tela de cadastro do medico
            beansEspec.setEspecialidade(jTextFieNomeEspecialidade.getText());
            beansEspec.setAtivo(jCheckBoxAtivo.isSelected());

            daoEspec.salvar(beansEspec);

            //Limpar os campos
            limparCampos();
            desabilitarCampos();

        } else if (flag == 2) {

            /**
             * não permitir desativar uma especialidade quando existir um medico
             * cadastrado com a especialidade em questão se o resultado da
             * consulta SELECT ativo FROM MEDICO where idespecialidade = 10 and
             * ativo =1 for maior que zero, informar ao cliente que a
             * especialidade não pode ser desativada pois existe um ou mais
             * médicos com a especialidade em questão que estão ativos.
             */
            int temMedico = verificaCadastroMedicoAtivo();
            switch (temMedico) {
                case 1:
                    /**
                     * Futuramente não limpar os campos, apenas permanecer com a
                     * flag marcada JOptionPane.PLAIN_MESSAGE
                     * JOptionPane.ERROR_MESSAGE JOptionPane.INFORMATION_MESSAGE
                     * JOptionPane.WARNING_MESSAGE JOptionPane.QUESTION_MESSAGE
                     * JOptionPane.PLAIN_MESSAGE (sem icone)
                     */
                    JOptionPane.showMessageDialog(null, " A especilidade " + jTextFieNomeEspecialidade.getText()
                            + ", não pode ser desativada, pois possui medico(s) que se encontra(m) ativo(s).\n"
                            + " Para ser possível desativa-lá, será necessario desativar o(s) médico(s)"
                            + "que se encontram ativos nessa especialidade.",
                            "Atenção !", JOptionPane.WARNING_MESSAGE);
                    jCheckBoxAtivo.setSelected(true);
                    desabilitarCampos();
                    break;
                case 0:
                    beansEspec.setIdEspecialidade(Integer.parseInt(jTextFieldIdEspec.getText()));
                    beansEspec.setEspecialidade(jTextFieNomeEspecialidade.getText());
                    beansEspec.setAtivo(jCheckBoxAtivo.isSelected());
                    daoEspec.Editar(beansEspec);
                    //Limpar os campos
                    //limparCampos();
                    desabilitarCampos();
                    break;
                case -1:
                    JOptionPane.showMessageDialog(null, "Erro inexperado, entre em contato com o suporte");
                    break;
            }

        }
        jTextFieldPesquisaEspecialidade.setEnabled(true);
        jButtonPesquisar.setEnabled(true);
        preencherEspecialidade("SELECT * FROM ESPECIALIDADE (NOLOCK) ORDER BY ESPEC");

    }//GEN-LAST:event_jButtonSalvarActionPerformed

    private void jButtonIncluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIncluirActionPerformed
        // TODO add your handling code here:
        flag = 1;

        jButtonCancelar.setEnabled(true);
        jButtonSalvar.setEnabled(true);
        jButtonIncluir.setEnabled(false);
        jButtonPesquisar.setEnabled(false);

        jTextFieldIdEspec.setEnabled(false);
        jCheckBoxAtivo.setSelected(true);
        jTextFieldPesquisaEspecialidade.setEnabled(false);

        this.limparCampos();
        this.habilitarCampos();

        preencherIdEspecialidadeInserir();
    }//GEN-LAST:event_jButtonIncluirActionPerformed

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        // TODO add your handling code here:
        jButtonCancelar.setEnabled(false);
        jButtonSalvar.setEnabled(false);
        jButtonIncluir.setEnabled(true);
        jButtonEditar.setEnabled(false);
        jButtonPesquisar.setEnabled(true);

        jTextFieldIdEspec.setEnabled(false);
        jTextFieldPesquisaEspecialidade.setEnabled(true);

        preencherEspecialidade("SELECT * FROM ESPECIALIDADE (NOLOCK) ORDER BY ESPEC");
        this.limparCampos();
        this.desabilitarCampos();

    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        preencherEspecialidade("SELECT * FROM ESPECIALIDADE (NOLOCK) ORDER BY ESPEC");
    }//GEN-LAST:event_jButton1ActionPerformed

    public int verificaCadastroMedicoAtivo() {
        try {
            conBd.conectarBd();
            String sql = "SELECT  ATIVO FROM MEDICO(NOLOCK) WHERE IDESPECIALIDADE =" + jTextFieldIdEspec.getText()
                    + " and ATIVO =1";
            conBd.executaSql(sql);
            if (conBd.rs.first()) {
                return 1;//tem registro
            }
            return 0;// não tem registro
        } catch (SQLException sqlEx) {
            System.err.println("erro: " + sqlEx.getMessage() + "\n\n" + sqlEx.getMessage());
            System.err.println("Erro 2: " + sqlEx.fillInStackTrace() + sqlEx.getLocalizedMessage());
            return -1;    //erro no registro    
        }

    }

    public void desabilitarCampos() {

        jTextFieNomeEspecialidade.setEnabled(false);
        jCheckBoxAtivo.setEnabled(false);
    }

    public void habilitarCampos() {
        jTextFieNomeEspecialidade.setEnabled(true);
        jCheckBoxAtivo.setEnabled(true);
    }

    public void limparCampos() {

        jTextFieldIdEspec.setText("");
        jTextFieNomeEspecialidade.setText("");
        jCheckBoxAtivo.setSelected(false);
        jTextFieldPesquisaEspecialidade.setText("");
    }

    public void preencherIdEspecialidadeInserir() {
        try {
            conBd.conectarBd();
            String sql = "SELECT MAX(IDESPECIALIDADE+1) AS PROXID FROM ESPECIALIDADE (NOLOCK)";
            conBd.executaSql(sql);

            conBd.rs.first();

            jTextFieldIdEspec.setText(String.valueOf(conBd.rs.getInt("PROXID")));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao gerar o proximo ID da especialidade! " + ex.getMessage());
        }
        conBd.DesconectarBd();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormEspecialidade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormEspecialidade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormEspecialidade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormEspecialidade.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormEspecialidade().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonEditar;
    private javax.swing.JButton jButtonIncluir;
    private javax.swing.JButton jButtonPesquisar;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JCheckBox jCheckBoxAtivo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableEspecialidade;
    private javax.swing.JTextField jTextFieNomeEspecialidade;
    private javax.swing.JTextField jTextFieldIdEspec;
    private javax.swing.JTextField jTextFieldPesquisaEspecialidade;
    // End of variables declaration//GEN-END:variables
}
